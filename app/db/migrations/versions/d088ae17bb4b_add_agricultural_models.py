"""Add agricultural models

Revision ID: d088ae17bb4b
Revises: 59821156b57d
Create Date: 2025-07-18 14:43:23.357949

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'd088ae17bb4b'
down_revision = '59821156b57d'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    op.create_table('commodity_listings',
    sa.Column('farmer_id', sa.UUID(), nullable=True),
    sa.Column('commodity_name', sa.String(length=100), nullable=True),
    sa.Column('slug', sa.String(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('quantity_kg', sa.Float(), nullable=True),
    sa.Column('harvest_date', sa.Date(), nullable=True),
    sa.Column('min_price', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('highest_bid', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('bids_count', sa.Integer(), nullable=True),
    sa.Column('is_approved', sa.Boolean(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('closing_date', sa.DateTime(), nullable=True),
    sa.Column('category_id', sa.UUID(), nullable=True),
    sa.Column('image_id', sa.UUID(), nullable=True),
    sa.Column('pkid', sa.Integer(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['farmer_id'], ['users.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['image_id'], ['files.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('pkid'),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('image_id'),
    sa.UniqueConstraint('slug')
    )
    op.create_table('alert_subscriptions',
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('commodity_id', sa.UUID(), nullable=True),
    sa.Column('threshold_pct', sa.Float(), nullable=True),
    sa.Column('direction', sa.Enum('BUY', 'SELL', name='alertdirection'), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('pkid', sa.Integer(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['commodity_id'], ['commodity_listings.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('pkid'),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('user_id', 'commodity_id', 'direction', name='unique_user_commodity_alert')
    )
    op.create_table('price_history',
    sa.Column('commodity_id', sa.UUID(), nullable=True),
    sa.Column('date', sa.Date(), nullable=True),
    sa.Column('avg_price', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('high_price', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('low_price', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('pkid', sa.Integer(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['commodity_id'], ['commodity_listings.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('pkid'),
    sa.UniqueConstraint('commodity_id', 'date', name='unique_commodity_date_price'),
    sa.UniqueConstraint('id')
    )
    op.add_column('bids', sa.Column('commodity_listing_id', sa.UUID(), nullable=True))
    op.create_unique_constraint('unique_commodity_listing_amount_bids', 'bids', ['commodity_listing_id', 'amount'])
    op.create_unique_constraint('unique_user_commodity_listing_bids', 'bids', ['user_id', 'commodity_listing_id'])
    op.create_foreign_key(None, 'bids', 'commodity_listings', ['commodity_listing_id'], ['id'], ondelete='CASCADE')
    
    # Create enum types before adding columns that use them
    op.execute("CREATE TYPE userrole AS ENUM ('FARMER', 'TRADER', 'ADMIN')")
    
    op.add_column('users', sa.Column('role', sa.Enum('FARMER', 'TRADER', 'ADMIN', name='userrole'), nullable=True))
    op.add_column('users', sa.Column('upi_id', sa.String(length=50), nullable=True))
    op.add_column('users', sa.Column('bank_account', sa.String(length=20), nullable=True))
    op.add_column('users', sa.Column('ifsc_code', sa.String(length=11), nullable=True))
    op.add_column('users', sa.Column('is_verified', sa.Boolean(), nullable=True))
    op.add_column('watchlists', sa.Column('commodity_listing_id', sa.UUID(), nullable=True))
    op.create_unique_constraint('unique_session_key_commodity_listing_watchlists', 'watchlists', ['session_key', 'commodity_listing_id'])
    op.create_unique_constraint('unique_user_commodity_listing_watchlists', 'watchlists', ['user_id', 'commodity_listing_id'])
    op.create_foreign_key(None, 'watchlists', 'commodity_listings', ['commodity_listing_id'], ['id'], ondelete='CASCADE')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'watchlists', type_='foreignkey')
    op.drop_constraint('unique_user_commodity_listing_watchlists', 'watchlists', type_='unique')
    op.drop_constraint('unique_session_key_commodity_listing_watchlists', 'watchlists', type_='unique')
    op.drop_column('watchlists', 'commodity_listing_id')
    op.drop_column('users', 'is_verified')
    op.drop_column('users', 'ifsc_code')
    op.drop_column('users', 'bank_account')
    op.drop_column('users', 'upi_id')
    op.drop_column('users', 'role')
    op.drop_constraint(None, 'bids', type_='foreignkey')
    op.drop_constraint('unique_user_commodity_listing_bids', 'bids', type_='unique')
    op.drop_constraint('unique_commodity_listing_amount_bids', 'bids', type_='unique')
    op.drop_column('bids', 'commodity_listing_id')
    op.drop_table('price_history')
    op.drop_table('alert_subscriptions')
    op.drop_table('commodity_listings')
    
    # Drop enum types
    op.execute("DROP TYPE IF EXISTS userrole")
    op.execute("DROP TYPE IF EXISTS alertdirection")
    # ### end Alembic commands ###
